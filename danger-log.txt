Danger Log - Homework 2 HTTP Caching Proxy
Adam Krekorian - agk19
Owen Gibson - ogg4
----------------------------

1) We handle failed socket openings, sending, and recieiving gracefully by closing the socket before closing the thread for a given request.
   However, the errors caused by the system calls do not throw exceptions and thus we cannot guarentee that they will not cause the program
   to terminate.

2) We use C++ STL objects to handle a lot of our data storage. This makes it easier to guarentee that our processing will not
   throw exceptions. Most of the functions we wrote, however, do not make exception guarentees.

3) Our proxy server does not gracefully close.

4) We are not always freeing memory before it goes out of scope. This results in a lot of leaked memory.

5) We are using standard mutexes, not read/write. There could be performance issues relating to the lack of shared mutexes for read accesses to the cache.

6) We don't have a thread to go through and kick expired cache entries out of the cache.
   This could lead to the cache filling up relatively quickly (potentially heap overflow?).

7) We have a max cache size of 1000. If on addition we exceed this we remove 100 entries from the cache at random.
   While the cache is locked this could potentially cause issues with other threads accessing cached data.
